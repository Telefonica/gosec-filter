#!/usr/bin/env python
"""
Usage:
    gosec-filter [-h|--help] <report> <filter>

Options:
    -h --help     Show this screen.
Details:
    report      the path to the GOSEC report in txt format
    filter      the path to the filter python module
"""

verbose = False
fKey = "<filter>"
rKey = "<report>"

from gosec_filter import GosecWarning
from docopt import docopt
import re
import imp
import sys
import traceback

def check_python_version():
    if sys.version_info[0] != 2 or sys.version_info[1] < 7:
        print("This script requires Python version 2.7")
        sys.exit(1)

def main():
    IGNORE_FIRST_N_LINES = 4
    PATTERN = "\[([^\]]+)\] - (.+)"

    check_python_version()

    p = re.compile(PATTERN)
    warnings = []
    args = docopt(__doc__)    
    #print args
    filterName = args[fKey]
    reportName = args[rKey]
    try:
        filtr = imp.load_source('filter_definition', filterName)
        the_gosec_filter = filtr.the_gosec_filter
    except:
	print "Can't import filter on Exception: "
        print ""
	traceback.print_exc()
        print ""
	sys.exit(1)

    print "Opening "+reportName
    print ""
    print "Will apply "+filterName+" filter"
    print ""
    with open(reportName) as file: # Use file to refer to the file object

       data = file.readlines()

       count = 0
       warn_count = 0
       filtered_warn_count = 0
       obj = GosecWarning()
       for line in data:
          count = count + 1
          if count > IGNORE_FIRST_N_LINES:
              #print line,
              if line[0] == "[":
                  m = p.match(line)
                  #print line,
                  if m != None:
                      #print m.group(0)
                      obj = GosecWarning(location=m.group(1),error=m.group(2),store=True)
                      #print "Location: " + m.group(1)
                      #print "Error:    " + m.group(2)
                  else:
                      #print "No match"
                      pass
              elif line[:4] == "  > ":
                  #print "Code: %s" % (line[4:])
                  if obj.store:
                      obj.code = line[4:].strip()
                      warnings.append(obj)

    if verbose:
        print "THE FILTER"
        print the_gosec_filter

    for x in warnings:
        warn_count = warn_count + 1
        if x not in the_gosec_filter:
            print x
        else:
            if verbose:
                print "FILTERED: %s" % (x) 
            filtered_warn_count = filtered_warn_count + 1

    if filtered_warn_count == warn_count:
        print "NO WARNINGS TO BE TAKEN INTO ACCOUNT THIS TIME."
        print ""

    print "%d filtered security warning(s) of %d warning(s) [filter has %d elements]" % (filtered_warn_count, warn_count, len(the_gosec_filter))

if __name__ == '__main__':
    if len(sys.argv) == 1:
        sys.argv.append('-h')
    sys.exit(main())
